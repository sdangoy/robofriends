{"version":3,"sources":["Components/SearchBox.js","Components/Scroll.js","Components/Card.js","Components/CardList.js","Components/ErrorBoundary.js","constants.js","Containers/App.js","action.js","reportWebVitals.js","reducers.js","index.js"],"names":["SearchBox","searchField","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Card","name","email","id","src","alt","CardList","robots","map","user","i","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","dispatch","useDispatch","useSelector","searchRobots","requestRobots","isPending","useEffect","fetch","then","response","json","data","payload","catch","filteredRobots","filter","robot","toLowerCase","includes","event","text","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAgBeA,G,MAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKC,UAAU,MAAf,SACI,uBACIC,KAAK,SACLC,YAAY,gBACZF,UAAU,mCACVG,SAAUJ,QCCXK,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCQJC,EAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKd,UAAU,sDAAf,UACI,qBAAKe,IAAG,+BAA0BD,EAA1B,YAAwCE,IAAI,WACpD,gCACI,6BAAKJ,IACL,4BAAIC,WCcLI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHZQ,S,gCCYlBC,E,kDAnBX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IACDkB,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAKtB,MAAMK,a,GAhBEmB,aCFfC,G,MAAsB,uBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBC8CtBC,MAxCf,WAEI,IAAMC,EAAWC,cACTtC,EAAgBuC,aAAY,SAACd,GAAD,OAAWA,EAAMe,gBAA7CxC,YAHG,EAI0BuC,aAAY,SAACd,GAAD,OAAWA,EAAMgB,iBAA1DrB,EAJG,EAIHA,OAAQsB,EAJL,EAIKA,UAAWf,EAJhB,EAIgBA,MAE3BgB,qBAAU,WAEFN,GCNuB,SAACA,GAChCA,EAAS,CAAElC,KAAM8B,IACjBW,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIX,EAAS,CAAElC,KAAM+B,EAAwBe,QAASD,OAC/DE,OAAM,SAAAvB,GAAK,OAAIU,EAAS,CAAElC,KAAMgC,EAAuBc,QAAStB,YDIlE,CAACU,IAEJ,IAIMc,EAAiB/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASvD,EAAYsD,kBAGzD,OAAGZ,EACQ,4CAGNf,OAAL,EAEQ,sBAAKzB,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,aAhBA,SAACuD,GClBE,IAACC,EDmBvBpB,GCnBuBoB,EDmBCD,EAAME,OAAOC,MClBlC,CACHxD,KAAM6B,EACNiB,QAASQ,QDgCD,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUrC,OAAQ+B,YE9B3BS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFRO,EAAqB,CACvBpE,YAAa,IAYXqE,EAAqB,CACvB3B,WAAW,EACXtB,OAAQ,GACRO,MAAO,ICTL2C,G,MAASC,0BAETC,EAAcC,YAAgB,CAAEjC,aDLV,WAA0C,IAAzCf,EAAwC,uDAAlC2C,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAOvE,MACV,KAAK6B,EACD,OAAO2C,OAAOC,OAAO,GAAInD,EAAO,CAAEzB,YAAa0E,EAAOzB,UAC1D,QACI,OAAOxB,ICAiCgB,cDUvB,WAA0C,IAAzChB,EAAwC,uDAAlC4C,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAOvE,MACV,KAAK8B,EACD,OAAO0C,OAAOC,OAAO,GAAInD,EAAO,CAAEiB,WAAW,IACjD,KAAKR,EACD,OAAOyC,OAAOC,OAAO,GAAInD,EAAO,CAAEL,OAAQsD,EAAOzB,QAASP,WAAW,IACzE,KAAKP,EACD,OAAOwC,OAAOC,OAAO,GAAInD,EAAO,CAAEE,MAAO+C,EAAOzB,QAASP,WAAW,IACxE,QACI,OAAOjB,MCjBboD,EACJC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAE5DW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINO,SAASC,eAAe,SAM1BzB,M","file":"static/js/main.90f06691.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                type='search' \r\n                placeholder='search robots' \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?100x100`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email} \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport CardList from '../Components/CardList';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../action';\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const { searchField } = useSelector((state) => state.searchRobots)\r\n    const { robots, isPending, error } = useSelector((state) => state.requestRobots)\r\n\r\n    useEffect(() => {\r\n        const onRequestRobots = () => {\r\n            dispatch(requestRobots())\r\n        }\r\n        onRequestRobots();\r\n    }, [dispatch])\r\n\r\n    const onSearchChange = (event) => {\r\n        dispatch(setSearchField(event.target.value))\r\n    }\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    \r\n    if(isPending) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n       \r\n    if (!error) {\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import { CHANGE_SEARCH_FIELD,\r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD,\r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = \n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <Provider store={store}>\n        <App />\n      </Provider>  \n    </div>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}